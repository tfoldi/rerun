# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/map_provider.fbs".

# You can extend this class by creating a "MapProviderExt" class in "map_provider_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin

__all__ = ["MapProvider", "MapProviderArrayLike", "MapProviderBatch", "MapProviderLike", "MapProviderType"]


from enum import Enum


class MapProvider(Enum):
    """**Component**: Name of the map provider to be used in Map views."""

    OpenStreetMap = 1
    """OpenStreetMap is the default map provider."""

    MapboxStreets = 2
    """Mapbox Streets is a minimalistic map designed by Mapbox."""

    MapboxDark = 3
    """Mapbox Dark is a dark themed map designed by Mapbox."""

    MapboxSatellite = 4
    """Mapbox Satellite is a satellite map designed by Mapbox."""


MapProviderLike = Union[
    MapProvider,
    Literal["openstreetmap"] | Literal["mapboxstreets"] | Literal["mapboxdark"] | Literal["mapboxsatellite"],
]
MapProviderArrayLike = Union[MapProviderLike, Sequence[MapProviderLike]]


class MapProviderType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.MapProvider"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("OpenStreetMap", pa.null(), nullable=True, metadata={}),
                pa.field("MapboxStreets", pa.null(), nullable=True, metadata={}),
                pa.field("MapboxDark", pa.null(), nullable=True, metadata={}),
                pa.field("MapboxSatellite", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class MapProviderBatch(BaseBatch[MapProviderArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = MapProviderType()

    @staticmethod
    def _native_to_pa_array(data: MapProviderArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (MapProvider, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, MapProvider):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(MapProvider, value):
                    types.append(MapProvider[value].value)  # fast path
                elif value.lower() == "openstreetmap":
                    types.append(MapProvider.OpenStreetMap.value)
                elif value.lower() == "mapboxstreets":
                    types.append(MapProvider.MapboxStreets.value)
                elif value.lower() == "mapboxdark":
                    types.append(MapProvider.MapboxDark.value)
                elif value.lower() == "mapboxsatellite":
                    types.append(MapProvider.MapboxSatellite.value)
                else:
                    raise ValueError(f"Unknown MapProvider kind: {value}")
            else:
                raise ValueError(f"Unknown MapProvider kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 4) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
